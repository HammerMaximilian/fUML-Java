[comment encoding = UTF-8 /]
[module generateModelClassFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fuml::generator::globalconstants::globalconstants /]
[import fuml::generator::naming::naming /]
[import fuml::generator::syntax::syntax /]

[template public generateModelClassFile(aPackage : Package)]
[file (sourceDirectoryPath() + aPackage.getNameSanitized() + '/' + aPackage.getNameSanitized() + 'Model.java', false, 'UTF-8')]
/*
 * [aPackage.getNameSanitized() + 'Model.java'/]
 * 
 * Auto-generated file
 */
package [aPackage.getNameSanitized()/];

[aPackage.allOwnedElements()
->select(e : Element | supportedUMLMetaclasses()->includes(e.eClass().name))
.generateMetaclassImports()
->including('import uml.classification.AggregationKind;\r\n')
->including('import uml.classification.ParameterDirectionKind;\r\n')
->including('import uml.commonbehavior.FunctionBehavior;\r\n')
->including('import uml.commonstructure.VisibilityKind;\r\n')
->including('import uml.packages.Package;\r\n')
->including('import uml.simpleclassifiers.PrimitiveType;\r\n')
->including('import utils.environment.InMemoryModel;\r\n')
->including('import utils.primitivetypes.PrimitiveTypesModel;\r\n')
->including('import utils.library.FoundationalModelLibraryModel;\r\n')
->asOrderedSet()/]

/* [protected (': User-defined imports')]
 * This section may be used for imports.
 * It will not be overwritten by future generation processes.
 */

/*
 * [/protected]
 */

public class [aPackage.getNameSanitized() + 'Model'/] extends InMemoryModel
{
	private static [aPackage.getNameSanitized() + 'Model'/] instance;

	[aPackage.generatePublicMemberDeclarations()/]

	public static [aPackage.getNameSanitized() + 'Model'/] instance()
	{
		if (instance == null)
        {
            instance = new [aPackage.getNameSanitized() + 'Model'/]();
            instance.initializeInMemoryModel();
        }

        return instance;
	}

	public [aPackage.getNameSanitized() + 'Model'/]()
	{
		/* [protected (': Additional model initializations')]
	 	 * This section may be used to do any additional model initialization,
		 * for example initializing user-defined members.
	 	 * It will not be overwritten by future generation processes.
	 	 */
	
		/*
	 	 * [/protected]
	 	 */
	}

	private void initializeInMemoryModel()
	{
	[for (metaclassName : String | aPackage.allOwnedElements().eClass()->sortedBy(name).name->select(s : String | supportedUMLMetaclasses()->includes(s))->asOrderedSet())]
		this.initialize[metaclassName/]_Instances();
	[/for]
	}

[for (metaclassName : String | aPackage.allOwnedElements().eClass()->sortedBy(name).name->select(s : String | supportedUMLMetaclasses()->includes(s))->asOrderedSet()) separator ('\n')]
	private void initialize[metaclassName/]_Instances()
	{
	[for (anElement : Element | aPackage.allOwnedElements()->select(e : Element | e.eClass().name = metaclassName))]
		// [anElement.eClass().name + ' ' + anElement.getFullQualifiedName()/]
		[anElement.generatePublicMemberCreation()/]
		[anElement.generateElementInitialization()/]
	[/for]
	}
[/for]

	/* [protected (': User-defined members')]
	 * This section may be used for user-defined members.
	 * It will not be overwritten by future generation processes.
	 */

	/*
	 * [/protected]
	 */
} // [aPackage.getNameSanitized() + 'Model'/]
[/file]
[/template]

[template private generatePublicMemberDeclarations(aPackage : Package) post(trim())]
/*
 * [aPackage.eClass().name + ' ' + aPackage.getName()/]
 */
public Package [aPackage.getFullNameSanitized()/] = new Package();
[comment Check if metaclass of anElement is supported by fUML syntax /]
[for (packagedElement : Element | aPackage.ownedElement->select(e : Element | supportedUMLMetaclasses()->includes(e.eClass().name)))]
	[packagedElement.generatePublicMemberDeclarations()/]
[/for]
[/template]

[template private generatePublicMemberDeclarations(anElement : Element) post(trim())]
[if (anElement.oclIsKindOf(Package))]
[anElement.oclAsType(Package).generatePublicMemberDeclarations()/]
[else]
public [anElement.eClass().name.adjustMetaclassName()/] [anElement.getFullNameSanitized()/] = new [anElement.eClass().name.adjustMetaclassName()/]();
	[for (ownedElement : Element | anElement.ownedElement->select(e : Element | supportedUMLMetaclasses()->includes(e.eClass().name)))]
	[ownedElement.generatePublicMemberDeclarations()/]
	[/for]
[/if]
[/template]

[template private generatePublicMemberCreation(anElement : Element) post(trim())]
addToElementRepository("[anElement.getName()/]", [anElement.getFullNameSanitized()/]);
[/template]

[comment Specialized element initialization templates for non-abstract metaclasses /]
[comment]
	Actions
[/comment]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(AcceptCallAction)) post(trim())]
[let anAcceptCallAction : AcceptCallAction = anElement.oclAsType(AcceptCallAction)]
[anAcceptCallAction.generateAcceptEventActionInitialization()/]
[comment Property 'AcceptCallAction::returnInformation' /]
	[if (not (anAcceptCallAction.returnInformation.oclIsUndefined()))]
[anAcceptCallAction.getFullNameSanitized()/].setReturnInformation([anAcceptCallAction.returnInformation.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(AcceptEventAction)) post(trim())]
[let anAcceptEventAction : AcceptEventAction = anElement.oclAsType(AcceptEventAction)]
[anAcceptEventAction.generateAcceptEventActionInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(AddStructuralFeatureValueAction)) post(trim())]
[let anAddStructuralFeatureValueAction : AddStructuralFeatureValueAction = anElement.oclAsType(AddStructuralFeatureValueAction)]
[anAddStructuralFeatureValueAction.generateWriteStructuralFeatureActionInitialization()/]
[comment Property 'AddStructuralFeatureValueAction::isReplaceAll' /]
[if (anAddStructuralFeatureValueAction.isReplaceAll)]
[anAddStructuralFeatureValueAction.getFullNameSanitized()/].setIsReplaceAll(true);
[/if]
[comment Property 'anAddStructuralFeatureValueAction::insertAt' /]
	[if (not (anAddStructuralFeatureValueAction.insertAt.oclIsUndefined()))]
[anAddStructuralFeatureValueAction.getFullNameSanitized()/].setInsertAt([anAddStructuralFeatureValueAction.insertAt.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(CallBehaviorAction)) post(trim())]
[let aCallBehaviorAction : CallBehaviorAction = anElement.oclAsType(CallBehaviorAction)]
[aCallBehaviorAction.generateCallActionInitialization()/]
[comment Property 'CallBehaviorAction::behavior' /]
	[if (not (aCallBehaviorAction.behavior.oclIsUndefined()))]
[aCallBehaviorAction.getFullNameSanitized()/].setBehavior([generateElementReference(aCallBehaviorAction.behavior, aCallBehaviorAction)/]);
	[/if]
[comment Property 'InvocationAction::argument' handled here /]
[for (anInputPin : InputPin | aCallBehaviorAction.argument)]
[aCallBehaviorAction.getFullNameSanitized()/].addArgument([anInputPin.getFullNameSanitized()/]);
[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(CallOperationAction)) post(trim())]
[let aCallOperationAction : CallOperationAction = anElement.oclAsType(CallOperationAction)]
[aCallOperationAction.generateCallActionInitialization()/]
[comment Property 'CallOperationActionAction::operation' /]
	[if (not (aCallOperationAction.operation.oclIsUndefined()))]
[aCallOperationAction.getFullNameSanitized()/].setOperation([generateElementReference(aCallOperationAction.operation, aCallOperationAction)/]);
	[/if]
[comment Property 'CallOperationActionAction::target' /]
	[if (not (aCallOperationAction.target.oclIsUndefined()))]
[aCallOperationAction.getFullNameSanitized()/].setTarget([generateElementReference(aCallOperationAction.target, aCallOperationAction)/]);
	[/if]
[comment Property 'InvocationAction::argument' handled here /]
[for (anInputPin : InputPin | aCallOperationAction.argument->reject(iP : InputPin | iP = aCallOperationAction.target))]
[aCallOperationAction.getFullNameSanitized()/].addArgument([anInputPin.getFullNameSanitized()/]);
[/for]
[comment Apply stereotype <<ExplicitBaseClassCall>> (from profile ExtensionsProfile) /]
[comment hard coded by now; TODO: implement sophisticated stereotype application mechanism /]
[if (not aCallOperationAction.getAppliedStereotype('ExtensionsProfile::ExplicitBaseClassCall').oclIsUndefined())]
[aCallOperationAction.getFullNameSanitized()/].applyStereotype(utils.extensionsprofile.ExtensionsProfileModel.instance().Stereotype_ExplicitBaseClassCall);
[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ClearAssociationAction)) post(trim())]
[let aClearAssociationAction : ClearAssociationAction = anElement.oclAsType(ClearAssociationAction)]
[aClearAssociationAction.generateActionInitialization()/]
[comment Property 'ClearAssociationAction::association' /]
[if (not (aClearAssociationAction.association.oclIsUndefined()))]
[aClearAssociationAction.getFullNameSanitized()/].setClassifier([generateElementReference(aClearAssociationAction.association, aClearAssociationAction)/]);
[/if]
[comment Property 'ClearAssociationAction::object' /]
	[if (not (aClearAssociationAction.object.oclIsUndefined()))]
[aClearAssociationAction.getFullNameSanitized()/].setObject([aClearAssociationAction.object.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ClearStructuralFeatureAction)) post(trim())]
[let aClearStructuralFeatureAction : ClearStructuralFeatureAction = anElement.oclAsType(ClearStructuralFeatureAction)]
[aClearStructuralFeatureAction.generateStructuralFeatureActionInitialization()/]
[comment Property 'ClearStructuralFeatureAction::result' /]
	[if (not (aClearStructuralFeatureAction.result.oclIsUndefined()))]
[aClearStructuralFeatureAction.getFullNameSanitized()/].setResult([aClearStructuralFeatureAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(CreateObjectAction)) post(trim())]
[let aCreateObjectAction : CreateObjectAction = anElement.oclAsType(CreateObjectAction)]
[aCreateObjectAction.generateActionInitialization()/]
[comment Property 'CreateObjectAction::classifier' /]
[if (not (aCreateObjectAction.classifier.oclIsUndefined()))]
[aCreateObjectAction.getFullNameSanitized()/].setClassifier([generateElementReference(aCreateObjectAction.classifier, aCreateObjectAction)/]);
[/if]
[comment Property 'CreateObjectAction::result' /]
	[if (not (aCreateObjectAction.result.oclIsUndefined()))]
[aCreateObjectAction.getFullNameSanitized()/].setResult([aCreateObjectAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(DestroyObjectAction)) post(trim())]
[let aDestroyObjectAction : DestroyObjectAction = anElement.oclAsType(DestroyObjectAction)]
[aDestroyObjectAction.generateActionInitialization()/]
[comment Property 'DestroyObjectAction::isDestroyLinks' /]
[if (aDestroyObjectAction.isDestroyLinks)]
[aDestroyObjectAction.getFullNameSanitized()/].setIsDestroyLinks(true);
[/if]
[comment Property 'DestroyObjectAction::isDestroyOwnedObjects' /]
[if (aDestroyObjectAction.isDestroyOwnedObjects)]
[aDestroyObjectAction.getFullNameSanitized()/].setIsDestroyOwnedObjects(true);
[/if]
[comment Property 'DestroyObjectAction::target' /]
	[if (not (aDestroyObjectAction.target.oclIsUndefined()))]
[aDestroyObjectAction.getFullNameSanitized()/].setTarget([aDestroyObjectAction.target.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ExceptionHandler)) post(trim())]
[let anExceptionHandler : ExceptionHandler = anElement.oclAsType(ExceptionHandler)]
[comment Property 'ExceptionHandler::exceptionInput' /]
[if (not (anExceptionHandler.exceptionInput.oclIsUndefined()))]
[anExceptionHandler.getFullNameSanitized()/].setExceptionInput([anExceptionHandler.exceptionInput.getFullNameSanitized()/]);
[/if]
[comment Property 'ExceptionHandler::exceptionType' /]
[for (aClassifier : Classifier | anExceptionHandler.exceptionType)]
[anExceptionHandler.getFullNameSanitized()/].addExceptionType([generateElementReference(aClassifier, anExceptionHandler)/]);
[/for]
[comment Property 'ExceptionHandler::handlerBody' /]
[if (not (anExceptionHandler.handlerBody.oclIsUndefined()))]
[anExceptionHandler.getFullNameSanitized()/].setHandlerBody([anExceptionHandler.handlerBody.getFullNameSanitized()/]);
[/if]
[/let]
[/template]


[template private generateElementInitialization(anElement : Element) ?(anElement.oclIsKindOf(ExpansionNode)) post(trim())]
[let anExpansionNode : ExpansionNode = anElement.oclAsType(ExpansionNode)]
[anExpansionNode.generateActivityNodeInitialization()/]
[anExpansionNode.generateTypedElementInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ExpansionRegion)) post(trim())]
[let anExpansionRegion : ExpansionRegion = anElement.oclAsType(ExpansionRegion)]
[anExpansionRegion.generateStructuredActivityNodeInitialization()/]
[comment Property 'ExpansionRegion::mode' /]
	[if (anExpansionRegion.mode <> ExpansionKind::iterative)]
[anExpansionRegion.getFullNameSanitized()/].setMode(ExpansionKind.[anExpansionRegion.mode/]);
	[/if]
[comment Property 'ExpansionRegion::inputElement' /]
[for (anExpansionNode : ExpansionNode | anExpansionRegion.inputElement)]
[anExpansionRegion.getFullNameSanitized()/].addInputElement([anExpansionNode.getFullNameSanitized()/]);
[/for]
[comment Property 'ExpansionRegion::outputElement' /]
[for (anExpansionNode : ExpansionNode | anExpansionRegion.outputElement)]
[anExpansionRegion.getFullNameSanitized()/].addOutputElement([anExpansionNode.getFullNameSanitized()/]);
[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LinkEndCreationData)) post(trim())]
[let aLinkEndCreationData : LinkEndCreationData = anElement.oclAsType(LinkEndCreationData)]
[aLinkEndCreationData.generateLinkEndDataInitialization()/]
[comment Property 'LinkEndCreationData::isReplaceAll' /]
[if (aLinkEndCreationData.isReplaceAll)]
[aLinkEndCreationData.getFullNameSanitized()/].setIsReplaceAll(true);
[/if]
[comment Property 'LinkEndCreationData::insertAt' /]
[if (not (aLinkEndCreationData.insertAt.oclIsUndefined()))]
[aLinkEndCreationData.getFullNameSanitized()/].setInsertAt([aLinkEndCreationData.insertAt.getFullNameSanitized()/]);
[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LinkEndDestructionData)) post(trim())]
[let aLinkEndDestructionData: LinkEndDestructionData = anElement.oclAsType(LinkEndDestructionData)]
[aLinkEndDestructionData.generateLinkEndDataInitialization()/]
[comment Property 'LinkEndCreationData::isDestroyDuplicates' /]
[if (aLinkEndDestructionData.isDestroyDuplicates)]
[aLinkEndDestructionData.getFullNameSanitized()/].setIsDestroyDuplicates(true);
[/if]
[comment Property 'LinkEndCreationData::destroyAt' /]
[if (not (aLinkEndDestructionData.destroyAt.oclIsUndefined()))]
[aLinkEndDestructionData.getFullNameSanitized()/].setDestroyAt([aLinkEndDestructionData.destroyAt.getFullNameSanitized()/]);
[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Pin)) post(trim())]
[let aPin : Pin = anElement.oclAsType(Pin)]
[aPin.generateActivityNodeInitialization()/]
[aPin.generateTypedElementInitialization()/]
[aPin.generateMultiplicityElementInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(RaiseExceptionAction)) post(trim())]
[let aRaiseExceptionAction : RaiseExceptionAction = anElement.oclAsType(RaiseExceptionAction)]
[aRaiseExceptionAction.generateActionInitialization()/]
[comment Property 'RaiseExceptionAction::exception' /]
	[if (not (aRaiseExceptionAction.exception.oclIsUndefined()))]
[aRaiseExceptionAction.getFullNameSanitized()/].setException([aRaiseExceptionAction.exception.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReadExtentAction)) post(trim())]
[let aReadExtentAction : ReadExtentAction = anElement.oclAsType(ReadExtentAction)]
[aReadExtentAction.generateActionInitialization()/]
[comment Property 'ReadExtentAction::classifier' /]
[if (not (aReadExtentAction.classifier.oclIsUndefined()))]
[aReadExtentAction.getFullNameSanitized()/].setClassifier([generateElementReference(aReadExtentAction.classifier, aReadExtentAction)/]);
[/if]
[comment Property 'ReadExtentAction::result' /]
	[if (not (aReadExtentAction.result.oclIsUndefined()))]
[aReadExtentAction.getFullNameSanitized()/].setResult([aReadExtentAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReadIsClassifiedObjectAction)) post(trim())]
[let aReadIsClassifiedObjectAction : ReadIsClassifiedObjectAction = anElement.oclAsType(ReadIsClassifiedObjectAction)]
[aReadIsClassifiedObjectAction.generateActionInitialization()/]
[comment Property 'ReadIsClassifiedObjectAction::isDirect' /]
	[if (aReadIsClassifiedObjectAction.isDirect)]
[aReadIsClassifiedObjectAction.getFullNameSanitized()/].setIsDirect(true);
	[/if]
[comment Property 'ReadIsClassifiedObjectAction::classifier' /]
	[if (not (aReadIsClassifiedObjectAction.classifier.oclIsUndefined()))]
[aReadIsClassifiedObjectAction.getFullNameSanitized()/].setClassifier([generateElementReference(aReadIsClassifiedObjectAction.classifier, aReadIsClassifiedObjectAction)/]);
	[/if]
[comment Property 'ReadIsClassifiedObjectAction::object' /]
	[if (not (aReadIsClassifiedObjectAction.object.oclIsUndefined()))]
[aReadIsClassifiedObjectAction.getFullNameSanitized()/].setObject([aReadIsClassifiedObjectAction.object.getFullNameSanitized()/]);
	[/if]
[comment Property 'ReadIsClassifiedObjectAction::result' /]
	[if (not (aReadIsClassifiedObjectAction.result.oclIsUndefined()))]
[aReadIsClassifiedObjectAction.getFullNameSanitized()/].setResult([aReadIsClassifiedObjectAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReadLinkAction)) post(trim())]
[let aReadLinkAction : ReadLinkAction = anElement.oclAsType(ReadLinkAction)]
[aReadLinkAction.generateLinkActionInitialization()/]
[comment Property 'ReadLinkAction::result' /]
[if (not (aReadLinkAction.result.oclIsUndefined()))]
[aReadLinkAction.getFullNameSanitized()/].setResult([aReadLinkAction.result.getFullNameSanitized()/]);
[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReadSelfAction)) post(trim())]
[let aReadSelfAction : ReadSelfAction = anElement.oclAsType(ReadSelfAction)]
[aReadSelfAction.generateActionInitialization()/]
[comment Property 'ReadSelfAction::result' /]
	[if (not (aReadSelfAction.result.oclIsUndefined()))]
[aReadSelfAction.getFullNameSanitized()/].setResult([aReadSelfAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReadStructuralFeatureAction)) post(trim())]
[let aReadStructuralFeatureAction : ReadStructuralFeatureAction = anElement.oclAsType(ReadStructuralFeatureAction)]
[aReadStructuralFeatureAction.generateStructuralFeatureActionInitialization()/]
[comment Property 'ReadStructuralFeatureAction::result' /]
	[if (not (aReadStructuralFeatureAction.result.oclIsUndefined()))]
[aReadStructuralFeatureAction.getFullNameSanitized()/].setResult([aReadStructuralFeatureAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReclassifyObjectAction)) post(trim())]
[let aReclassifyObjectAction : ReclassifyObjectAction = anElement.oclAsType(ReclassifyObjectAction)]
[aReclassifyObjectAction.generateActionInitialization()/]
[comment Property 'ReclassifyObjectAction::isReplaceAll' /]
[if (aReclassifyObjectAction.isReplaceAll)]
[aReclassifyObjectAction.getFullNameSanitized()/].setIsReplaceAll(true);
[/if]
[comment Property 'ReclassifyObjectAction::oldClassifier' /]
[for (aClassifier : Classifier | aReclassifyObjectAction.oldClassifier)]
[aReclassifyObjectAction.getFullNameSanitized()/].addOldClassifier([generateElementReference(aClassifier, aReclassifyObjectAction)/]);
[/for]
[comment Property 'ReclassifyObjectAction::newClassifier' /]
[for (aClassifier : Classifier | aReclassifyObjectAction.newClassifier)]
[aReclassifyObjectAction.getFullNameSanitized()/].addNewClassifier([generateElementReference(aClassifier, aReclassifyObjectAction)/]);
[/for]
[comment Property 'ReclassifyObjectAction::object' /]
	[if (not (aReclassifyObjectAction.object.oclIsUndefined()))]
[aReclassifyObjectAction.getFullNameSanitized()/].setObject([aReclassifyObjectAction.object.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReduceAction)) post(trim())]
[let aReduceAction : ReduceAction = anElement.oclAsType(ReduceAction)]
[aReduceAction.generateActionInitialization()/]
[comment Property 'ReduceAction::isOrdered' /]
[aReduceAction.getFullNameSanitized()/].setIsOrdered([aReduceAction.isOrdered.toString()/]);
[comment Property 'ReduceAction::reducer' /]
	[if (not (aReduceAction.reducer.oclIsUndefined()))]
[aReduceAction.getFullNameSanitized()/].setReducer([generateElementReference(aReduceAction.reducer, aReduceAction)/]);
	[/if]
[comment Property 'ReduceAction::collection' /]
	[if (not (aReduceAction.collection.oclIsUndefined()))]
[aReduceAction.getFullNameSanitized()/].setCollection([aReduceAction.collection.getFullNameSanitized()/]);
	[/if]
[comment Property 'ReduceAction::result' /]
	[if (not (aReduceAction.result.oclIsUndefined()))]
[aReduceAction.getFullNameSanitized()/].setResult([aReduceAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(RemoveStructuralFeatureValueAction)) post(trim())]
[let aRemoveStructuralFeatureValueAction : RemoveStructuralFeatureValueAction = anElement.oclAsType(RemoveStructuralFeatureValueAction)]
[aRemoveStructuralFeatureValueAction.generateWriteStructuralFeatureActionInitialization()/]
[comment Property 'RemoveStructuralFeatureValueAction::isRemoveDuplicates' /]
[if (aRemoveStructuralFeatureValueAction.isRemoveDuplicates)]
[aRemoveStructuralFeatureValueAction.getFullNameSanitized()/].setIsRemoveDuplicates(true);
[/if]
[comment Property 'RemoveStructuralFeatureValueAction::removeAt' /]
	[if (not (aRemoveStructuralFeatureValueAction.removeAt.oclIsUndefined()))]
[aRemoveStructuralFeatureValueAction.getFullNameSanitized()/].setRemoveAt([aRemoveStructuralFeatureValueAction.removeAt.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ReplyAction)) post(trim())]
[let aReplyAction : ReplyAction = anElement.oclAsType(ReplyAction)]
[aReplyAction.generateActionInitialization()/]
[comment Property 'ReplyAction::replyToCall' /]
	[if (not (aReplyAction.replyToCall.oclIsUndefined()))]
[aReplyAction.getFullNameSanitized()/].setReplyToCall([generateElementReference(aReplyAction.replyToCall, aReplyAction)/]);
	[/if]
[comment Property 'ReplyAction::returnInformation' /]
	[if (not (aReplyAction.returnInformation.oclIsUndefined()))]
[aReplyAction.getFullNameSanitized()/].setReturnInformation([aReplyAction.returnInformation.getFullNameSanitized()/]);
	[/if]
[comment Property 'ReplyAction::replyValue' /]
[for (anInputPin : InputPin | aReplyAction.replyValue)]
[aReplyAction.getFullNameSanitized()/].addReplyValue([anInputPin.getFullNameSanitized()/]);
[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(SendSignalAction)) post(trim())]
[let aSendSignalAction : SendSignalAction = anElement.oclAsType(SendSignalAction)]
[aSendSignalAction.generateActionInitialization()/]
[comment Property 'SendSignalAction::signal' /]
[if (not (aSendSignalAction.signal.oclIsUndefined()))]
[aSendSignalAction.getFullNameSanitized()/].setSignal([generateElementReference(aSendSignalAction.signal, aSendSignalAction)/]);
[/if]
[comment Property 'SendSignalAction::target' /]
	[if (not (aSendSignalAction.target.oclIsUndefined()))]
[aSendSignalAction.getFullNameSanitized()/].setTarget([aSendSignalAction.target.getFullNameSanitized()/]);
	[/if]
[comment Property 'InvocationAction::argument' handled here /]
[for (anInputPin : InputPin | aSendSignalAction.argument)]
[aSendSignalAction.getFullNameSanitized()/].addArgument([anInputPin.getFullNameSanitized()/]);
[/for]
[comment Property 'InvocationAction::onPort' handled here /]
	[if (not (aSendSignalAction.onPort.oclIsUndefined()))]
[aSendSignalAction.getFullNameSanitized()/].setOnPort([generateElementReference(aSendSignalAction.onPort, aSendSignalAction)/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(StartClassifierBehaviorAction)) post(trim())]
[let aStartClassifierBehaviorAction : StartClassifierBehaviorAction = anElement.oclAsType(StartClassifierBehaviorAction)]
[aStartClassifierBehaviorAction.generateActionInitialization()/]
[comment Property 'StartClassifierBehaviorAction::object' /]
	[if (not (aStartClassifierBehaviorAction.object.oclIsUndefined()))]
[aStartClassifierBehaviorAction.getFullNameSanitized()/].setObject([aStartClassifierBehaviorAction.object.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(StartObjectBehaviorAction)) post(trim())]
[let aStartObjectBehaviorAction : StartObjectBehaviorAction = anElement.oclAsType(StartObjectBehaviorAction)]
[aStartObjectBehaviorAction.generateActionInitialization()/]
[comment Property 'StartObjectBehaviorAction::object' /]
	[if (not (aStartObjectBehaviorAction.object.oclIsUndefined()))]
[aStartObjectBehaviorAction.getFullNameSanitized()/].setObject([aStartObjectBehaviorAction.object.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(TestIdentityAction)) post(trim())]
[let aTestIdentityAction : TestIdentityAction = anElement.oclAsType(TestIdentityAction)]
[aTestIdentityAction.generateActionInitialization()/]
[comment Property 'TestIdentityAction::first' /]
	[if (not (aTestIdentityAction.first.oclIsUndefined()))]
[aTestIdentityAction.getFullNameSanitized()/].setFirst([aTestIdentityAction.first.getFullNameSanitized()/]);
	[/if]
[comment Property 'TestIdentityAction::second' /]
	[if (not (aTestIdentityAction.second.oclIsUndefined()))]
[aTestIdentityAction.getFullNameSanitized()/].setSecond([aTestIdentityAction.second.getFullNameSanitized()/]);
	[/if]
[comment Property 'TestIdentityAction::result' /]
	[if (not (aTestIdentityAction.result.oclIsUndefined()))]
[aTestIdentityAction.getFullNameSanitized()/].setResult([aTestIdentityAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(UnmarshallAction)) post(trim())]
[let anUnmarshallAction : UnmarshallAction = anElement.oclAsType(UnmarshallAction)]
[anUnmarshallAction.generateActionInitialization()/]
[comment Property 'UnmarshallAction::unmarshallType' /]
	[if (not (anUnmarshallAction.unmarshallType.oclIsUndefined()))]
[anUnmarshallAction.getFullNameSanitized()/].setUnmarshallType([generateElementReference(anUnmarshallAction.unmarshallType, anUnmarshallAction)/]);
	[/if]
[comment Property 'UnmarshallAction::object' /]
	[if (not (anUnmarshallAction.object.oclIsUndefined()))]
[anUnmarshallAction.getFullNameSanitized()/].setObject([anUnmarshallAction.object.getFullNameSanitized()/]);
	[/if]
[comment Property 'UnmarshallAction::result' /]
	[for (anOutputPin : OutputPin | anUnmarshallAction.result)]
[anUnmarshallAction.getFullNameSanitized()/].addResult([anOutputPin.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ValueSpecificationAction)) post(trim())]
[let aValueSpecificationAction : ValueSpecificationAction = anElement.oclAsType(ValueSpecificationAction)]
[aValueSpecificationAction.generateActionInitialization()/]
[comment Property 'ValueSpecificationAction::value' /]
	[if (not (aValueSpecificationAction.value.oclIsUndefined()))]
[aValueSpecificationAction.getFullNameSanitized()/].setValue([aValueSpecificationAction.value.getFullNameSanitized()/]);
	[/if]
[comment Property 'ValueSpecificationAction::result' /]
	[if (not (aValueSpecificationAction.result.oclIsUndefined()))]
[aValueSpecificationAction.getFullNameSanitized()/].setResult([aValueSpecificationAction.result.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(WriteLinkAction)) post(trim())]
[let aWriteLinkAction : WriteLinkAction = anElement.oclAsType(WriteLinkAction)]
[aWriteLinkAction.generateLinkActionInitialization()/]
[/let]
[/template]

[comment]
	Activities
[/comment]
	
[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Activity)) post(trim())]
[let anActivity : Activity = anElement.oclAsType(Activity)]
[anActivity.generateBehaviorInitialization()/]
[comment Property 'Activity::isReadOnly' /]
	[if (anActivity.isReadOnly)]
[anActivity.getFullNameSanitized()/].setIsReadOnly(true);
	[/if]
[comment Property 'Activity::node' NOTE: 'Activity::structuredNode' is handled seperately (see below) /]
	[for (anActivityNode : ActivityNode | anActivity.node->removeAll(anActivity.structuredNode))]
[anActivity.getFullNameSanitized()/].addNode([anActivityNode.getFullNameSanitized()/]);
	[/for]
[comment Property 'Activity::edge' /]
	[for (anActivityEdge : ActivityEdge | anActivity.edge)]
[anActivity.getFullNameSanitized()/].addEdge([anActivityEdge.getFullNameSanitized()/]);
	[/for]
[comment Property 'Activity::structuredNode' /]
	[for (aStructuredActivityNode : StructuredActivityNode | anActivity.structuredNode)]
[anActivity.getFullNameSanitized()/].addStructuredNode([aStructuredActivityNode.getFullNameSanitized()/]);
[anActivity.getFullNameSanitized()/].addGroup([aStructuredActivityNode.getFullNameSanitized()/]);
	[/for]
[comment Property 'Activity::group' NOTE: excludes 'Activity::structuredNode' to avoid duplicates /]
	[for (anActivityGroup : ActivityGroup | anActivity.group->removeAll(anActivity.structuredNode))]
[anActivity.getFullNameSanitized()/].addGroup([anActivityGroup.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ActivityEdge)) post(trim())]
[let anActivityEdge : ActivityEdge = anElement.oclAsType(ActivityEdge)]
[anActivityEdge.generateNamedElementInitialization()/]
[anActivityEdge.generateRedefinableElementInitialization()/]
[comment Property 'ActivityEdge::source' /]
	[if (not (anActivityEdge.source.oclIsUndefined()))]
[anActivityEdge.getFullNameSanitized()/].setSource([anActivityEdge.source.getFullNameSanitized()/]);
	[/if]
[comment Property 'ActivityEdge::target' /]
	[if (not (anActivityEdge.target.oclIsUndefined()))]
[anActivityEdge.getFullNameSanitized()/].setTarget([anActivityEdge.target.getFullNameSanitized()/]);
	[/if]
[comment Property 'ActivityEdge::guard' /]
	[if (not (anActivityEdge.guard.oclIsUndefined()))]
[anActivityEdge.getFullNameSanitized()/].setGuard([anActivityEdge.guard.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ActivityParameterNode)) post(trim())]
[let anActivityParameterNode : ActivityParameterNode = anElement.oclAsType(ActivityParameterNode)]
[anActivityParameterNode.generateActivityNodeInitialization()/]
[anActivityParameterNode.generateTypedElementInitialization()/]
[comment Property 'ActivityParameterNode::parameter' /]
	[if (not (anActivityParameterNode.parameter.oclIsUndefined()))]
[anActivityParameterNode.getFullNameSanitized()/].setParameter([anActivityParameterNode.parameter.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(CentralBufferNode)) post(trim())]
[let aCentralBufferNode : CentralBufferNode = anElement.oclAsType(CentralBufferNode)]
[aCentralBufferNode.generateActivityNodeInitialization()/]
[aCentralBufferNode.generateTypedElementInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(DecisionNode)) post(trim())]
[let aDecisionNode : DecisionNode = anElement.oclAsType(DecisionNode)]
[aDecisionNode.generateActivityNodeInitialization()/]
[comment Property 'DecisionNode::decisionInput' /]
	[if (not (aDecisionNode.decisionInput.oclIsUndefined()))]
[aDecisionNode.getFullNameSanitized()/].setDecisionInput([generateElementReference(aDecisionNode.decisionInput, aDecisionNode)/]);
	[/if]
[comment Property 'DecisionNode::decisionInputFlow' /]
	[if (not (aDecisionNode.decisionInputFlow.oclIsUndefined()))]
[aDecisionNode.getFullNameSanitized()/].setDecisionInputFlow([generateElementReference(aDecisionNode.decisionInputFlow, aDecisionNode)/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(FinalNode)) post(trim())]
[let aFinalNode : FinalNode = anElement.oclAsType(FinalNode)]
[aFinalNode.generateActivityNodeInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ForkNode)) post(trim())]
[let aForkNode : ForkNode = anElement.oclAsType(ForkNode)]
[aForkNode.generateActivityNodeInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(InitialNode)) post(trim())]
[let anInitialNode : InitialNode = anElement.oclAsType(InitialNode)]
[anInitialNode.generateActivityNodeInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(JoinNode)) post(trim())]
[let aJoinNode : JoinNode = anElement.oclAsType(JoinNode)]
[aJoinNode.generateActivityNodeInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(MergeNode)) post(trim())]
[let aMergeNode : MergeNode = anElement.oclAsType(MergeNode)]
[aMergeNode.generateActivityNodeInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(StructuredActivityNode)) post(trim())]
[let aStructuredActivityNode : StructuredActivityNode = anElement.oclAsType(StructuredActivityNode)]
[aStructuredActivityNode.generateStructuredActivityNodeInitialization()/]
[/let]
[/template]

[comment]
	Classifiers
[/comment]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Association)) post(trim())]
[let anAssociation : Association = anElement.oclAsType(Association)]
[anAssociation.generateClassifierInitialization()/]
[comment Property 'Association::isDerived' /]
	[if (anAssociation.isDerived)]
[anAssociation.getFullNameSanitized()/].setIsDerived(true);
	[/if]
[comment Property 'Association::ownedEnd' /]
	[for (aProperty : Property | anAssociation.ownedEnd)]
[anAssociation.getFullNameSanitized()/].addOwnedEnd([aProperty.getFullNameSanitized()/]);
	[/for]
[comment Property 'Association::memberEnd' /]
	[for (aProperty : Property | anAssociation.memberEnd->removeAll(anAssociation.ownedEnd))]
[anAssociation.getFullNameSanitized()/].addMemberEnd([aProperty.getFullNameSanitized()/]);
	[/for]
[comment Property 'Association::navigableOwnedEnd' /]
	[for (aProperty : Property | anAssociation.navigableOwnedEnd)]
[anAssociation.getFullNameSanitized()/].addNavigableOwnedEnd([aProperty.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[comment OpaqueBehavior must be evaluated before Class /]
[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(OpaqueBehavior)) post(trim())]
[let anOpaqueBehavior : OpaqueBehavior = anElement.oclAsType(OpaqueBehavior)]
[anOpaqueBehavior.generateBehaviorInitialization()/]
[comment Property 'OpaqueBehavior::language' /]
	[for (language : String | anOpaqueBehavior.language)]
[anOpaqueBehavior.getFullNameSanitized()/].addLanguage("[language/]");
	[/for]
[comment Property 'OpaqueBehavior::body' /]
	[for (_body : String | anOpaqueBehavior._body)]
[anOpaqueBehavior.getFullNameSanitized()/].addBody("[_body.substituteAll('"', '\\"').substituteAll('\r\n', ' ')/]");
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Class)) post(trim())]
[let aClass : Class = anElement.oclAsType(Class)]
[aClass.generateClassifierInitialization()/]
[aClass.generateBehavioredClassifierInitialization()/]
[aClass.generateStructuredClassifierInitialization()/]
[comment Property 'Class::isActive' /]
	[if (aClass.isActive)]
[aClass.getFullNameSanitized()/].setIsActive(true);
	[/if]
[comment Property 'Class::ownedOperation' /]
	[for (anOperation : Operation | aClass.ownedOperation)]
[aClass.getFullNameSanitized()/].addOwnedOperation([anOperation.getFullNameSanitized()/]);
	[/for]
[comment Property 'Class::ownedReception' /]
	[for (aReception : Reception | aClass.ownedReception)]
[aClass.getFullNameSanitized()/].addOwnedReception([aReception.getFullNameSanitized()/]);
	[/for]
[comment Property 'Class::nestedClassifier' /]
	[for (aClassifier : Classifier | aClass.nestedClassifier)]
[aClass.getFullNameSanitized()/].addNestedClassifier([aClassifier.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Enumeration)) post(trim())]
[let anEnumeration : Enumeration = anElement.oclAsType(Enumeration)]
[anEnumeration.generateDataTypeInitialization()/]
[comment Property 'Enumeration::ownedLiteral' /]
	[for (anEnumerationLiteral : EnumerationLiteral | anEnumeration.ownedLiteral)]
[anEnumeration.getFullNameSanitized()/].addOwnedLiteral([anEnumerationLiteral.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(DataType)) post(trim())]
[let aDataType : DataType = anElement.oclAsType(DataType)]
[aDataType.generateDataTypeInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Interface)) post(trim())]
[let anInterface : Interface = anElement.oclAsType(Interface)]
[anInterface.generateClassifierInitialization()/]
[comment Property 'Interface::ownedOperation' /]
	[for (anOperation : Operation | anInterface.ownedOperation)]
[anInterface.getFullNameSanitized()/].addOwnedOperation([anOperation.getFullNameSanitized()/]);
	[/for]
[comment Property 'Interface::ownedReception' /]
	[for (aReception : Reception | anInterface.ownedReception)]
[anInterface.getFullNameSanitized()/].addOwnedReception([aReception.getFullNameSanitized()/]);
	[/for]
[comment Property 'Interface::nestedClassifier' /]
	[for (aClassifier : Classifier | anInterface.nestedClassifier)]
[anInterface.getFullNameSanitized()/].addNestedClassifier([aClassifier.getFullNameSanitized()/]);
	[/for]
[comment Property 'Interface::redefinedInterface' /]
	[for (redefinedInterface : Interface | anInterface.redefinedInterface)]
[anInterface.getFullNameSanitized()/].addRedefinedInterface([redefinedInterface.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Generalization)) post(trim())]
[let aGeneralization : Generalization = anElement.oclAsType(Generalization)]
[comment Property 'Generalization::general' /]
[aGeneralization.getFullNameSanitized()/].setGeneral([aGeneralization.general.getFullNameSanitized()/]);
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(InstanceSpecification)) post(trim())]
[let anInstanceSpecification : InstanceSpecification = anElement.oclAsType(InstanceSpecification)]
[anInstanceSpecification.generateNamedElementInitialization()/]
[comment Property 'InstanceSpecification::classifier' /]
	[for (aClassifier : Classifier | anInstanceSpecification.classifier)]
[anInstanceSpecification.getFullNameSanitized()/].addClassifier([generateElementReference(aClassifier, anInstanceSpecification)/]);
	[/for]
[comment Property 'InstanceSpecification::slot' /]
	[for (aSlot : Slot | anInstanceSpecification.slot)]
[anInstanceSpecification.getFullNameSanitized()/].addSlot([aSlot.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(InterfaceRealization)) post(trim())]
[let anInterfaceRealization : InterfaceRealization = anElement.oclAsType(InterfaceRealization)]
[comment skip initialization of Dependency to avoid contract appearing twice in supplier /]
[anInterfaceRealization.generateNamedElementInitialization()/]
[comment Property 'anInterfaceRealization::contract'/]
	[if (not (anInterfaceRealization.contract.oclIsUndefined()))]
[anInterfaceRealization.getFullNameSanitized()/].setContract([anInterfaceRealization.contract.getFullNameSanitized()/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Usage)) post(trim())]
[let aUsage : Usage = anElement.oclAsType(Usage)]
[aUsage.generateDependencyInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Dependency)) post(trim())]
[let aDependency : Dependency = anElement.oclAsType(Dependency)]
[aDependency.generateDependencyInitialization()/]
[/let]
[/template]

[comment]
	Features
[/comment]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Connector)) post(trim())]
[let aConnector : Connector = anElement.oclAsType(Connector)]
[aConnector.generateFeatureInitialization()/]
[comment Property 'Connector::end' /]
[for (aConnectorEnd : ConnectorEnd | aConnector.end)]
[aConnector.getFullNameSanitized()/].addEnd([aConnectorEnd.getFullNameSanitized()/]);
[/for]
[comment Property 'Connector::type' /]
	[if (not (aConnector.type.oclIsUndefined()))]
[aConnector.getFullNameSanitized()/].setType([aConnector.type.getFullNameSanitized()/]);
	[/if]
[comment Property 'Connector::redefinedConnector' /]
[for (redefinedConnector : Connector | aConnector.redefinedConnector)]
[aConnector.getFullNameSanitized()/].addRedefinedConnector([redefinedConnector.getFullNameSanitized()/]);
[/for]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(ConnectorEnd)) post(trim())]
[let aConnectorEnd : ConnectorEnd = anElement.oclAsType(ConnectorEnd)]
[aConnectorEnd.generateMultiplicityElementInitialization()/]
[comment Property 'aConnectorEnd::role' /]
[if (not (aConnectorEnd.role.oclIsUndefined()))]
[aConnectorEnd.getFullNameSanitized()/].setRole([aConnectorEnd.role.getFullNameSanitized()/]);
[/if]
[comment Property 'aConnectorEnd::partWithPort' /]
[if (not (aConnectorEnd.partWithPort.oclIsUndefined()))]
[aConnectorEnd.getFullNameSanitized()/].setPartWithPort([aConnectorEnd.partWithPort.getFullNameSanitized()/]);
[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Operation)) post(trim())]
[let anOperation : Operation = anElement.oclAsType(Operation)]
[anOperation.generateBehavioralFeatureInitialization()/]
[comment Property 'Operation::redefinedOperation' /]
	[for (redefinedOperation : Operation | anOperation.redefinedOperation)]
[anOperation.getFullNameSanitized()/].addRedefinedOperation([generateElementReference(redefinedOperation, anOperation)/]);
	[/for]
[comment Apply stereotype <<Create>> (only stereotype required by PSCS) /]
[comment hard coded by now; TODO: implement sophisticated stereotype application mechanism /]
	[if (not anOperation.getAppliedStereotype('StandardProfile::Create').oclIsUndefined())]
[anOperation.getFullNameSanitized()/].applyStereotype(uml.standardprofile.StandardProfileModel.Instance().Stereotype_Create);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Parameter)) post(trim())]
[let aParameter : Parameter = anElement.oclAsType(Parameter)]
[aParameter.generateNamedElementInitialization()/]
[aParameter.generateMultiplicityElementInitialization()/]
[aParameter.generateTypedElementInitialization()/]
[comment Property 'Parameter::direction' /]
	[if (aParameter.direction <> ParameterDirectionKind::_in)]
[aParameter.getFullNameSanitized()/].setDirection(ParameterDirectionKind.[aParameter.direction/][if(aParameter.direction = ParameterDirectionKind::return)]_[/if]);
	[/if]
[comment Property 'Parameter::isStream' /]
	[if (aParameter.isStream)]
[aParameter.getFullNameSanitized()/].setIsStream(true);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Property)) post(trim())]
[let aProperty : Property = anElement.oclAsType(Property)]
[aProperty.generateStructuralFeatureInitialization()/]
[comment Property 'Property::isDerived' /]
	[if (aProperty.isDerived)]
[aProperty.getFullNameSanitized()/].isDerived = true;
	[/if]
[comment Property 'Property::isReadOnly' /]
	[if (aProperty.isReadOnly)]
[aProperty.getFullNameSanitized()/].setIsReadOnly(true);
	[/if]
[comment Property 'Property::isDerivedUnion' /]
	[if (aProperty.isDerivedUnion)]
[aProperty.getFullNameSanitized()/].isDerivedUnion = true;
	[/if]
[comment Property 'Property::aggregation' /]
	[if (aProperty.aggregation <> AggregationKind::none)]
[aProperty.getFullNameSanitized()/].setAggregation(AggregationKind.[aProperty.aggregation/]);
	[/if]
[comment Property 'Property::isID' /]
	[if (aProperty.isID)]
[aProperty.getFullNameSanitized()/].setIsID(true);
	[/if]
[comment Property 'Property::defaultValue' /]
	[if (not aProperty.defaultValue.oclIsUndefined())]
[aProperty.getFullNameSanitized()/].setDefaultValue([aProperty.defaultValue.getFullNameSanitized()/]);
	[/if]
[/let]
[if (anElement.oclIsKindOf(Port))]
[let aPort : Port = anElement.oclAsType(Port)]
[comment Property 'Port::isBehavior' /]
	[if (aPort.isBehavior)]
[aPort.getFullNameSanitized()/].isBehavior = true;
	[/if]
[comment Property 'Port::isConjugated' /]
	[if (aPort.isConjugated)]
[aPort.getFullNameSanitized()/].isConjugated = true;;
	[/if]
[comment Property 'Port::isService' /]
	[if (aPort.isService)]
[aPort.getFullNameSanitized()/].isService = true;
	[/if]
[comment Property 'Port::required' /]
	[for (anInterface : Interface | aPort.required)]
[aPort.getFullNameSanitized()/].addRequired([anInterface.getFullNameSanitized()/]);
	[/for]
[comment Property 'Port::provided' /]
	[for (anInterface : Interface | aPort.provided)]
[aPort.getFullNameSanitized()/].addProvided([anInterface.getFullNameSanitized()/]);
	[/for]
[comment Property 'Port::redefinedPort' /]
	[for (redefinedPort : Port | aPort.redefinedPort)]
[aPort.getFullNameSanitized()/].addRedefinedPort([redefinedPort.getFullNameSanitized()/]);
	[/for]
[/let]
[/if]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Reception)) post(trim())]
[let aReception : Reception = anElement.oclAsType(Reception)]
[aReception.generateBehavioralFeatureInitialization()/]
[comment Property 'Reception::signal' /]
	[if (not (aReception.signal.oclIsUndefined()))]
[aReception.getFullNameSanitized()/].setSignal([generateElementReference(aReception.signal, aReception)/]);
	[/if]
[/let]
[/template]

[comment]
	Signals & Events
[/comment]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(CallEvent)) post(trim())]
[let aCallEvent : CallEvent = anElement.oclAsType(CallEvent)]
[aCallEvent.generateEventInitialization()/]
[comment Property 'CallEvent::operation' /]
	[if (not (aCallEvent.operation.oclIsUndefined()))]
[aCallEvent.getFullNameSanitized()/].setOperation([generateElementReference(aCallEvent.operation, aCallEvent)/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Signal)) post(trim())]
[let aSignal : Signal = anElement.oclAsType(Signal)]
[aSignal.generateClassifierInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(SignalEvent)) post(trim())]
[let aSignalEvent : SignalEvent = anElement.oclAsType(SignalEvent)]
[aSignalEvent.generateEventInitialization()/]
[comment Property 'SignalEvent::signal' /]
	[if (not (aSignalEvent.signal.oclIsUndefined()))]
[aSignalEvent.getFullNameSanitized()/].setSignal([generateElementReference(aSignalEvent.signal, aSignalEvent)/]);
	[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Trigger)) post(trim())]
[let aTrigger : Trigger = anElement.oclAsType(Trigger)]
// [aTrigger.eClass().name + ' ' + aTrigger.getName()/]
[aTrigger.generateNamedElementInitialization()/]
[comment Property 'Trigger::event' /]
	[if (not (aTrigger.event.oclIsUndefined()))]
[aTrigger.getFullNameSanitized()/].setEvent([generateElementReference(aTrigger.event, aTrigger)/]);
	[/if]
[/let]
[/template]

[comment]
	Packages
[/comment]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(Package)) post(trim())]
[let aPackage : Package = anElement.oclAsType(Package)]
/*
 * [aPackage.eClass().name + ' ' + aPackage.getName()/]
 */
[aPackage.generateNamedElementInitialization()/]
	[for (aPackageableElement : PackageableElement | aPackage.packagedElement->select(pE : PackageableElement | supportedUMLMetaclasses()->includes(pE.eClass().name)))]
[aPackage.getFullNameSanitized()/].addPackagedElement([aPackageableElement.getFullNameSanitized()/]);
	[/for]
[/let]
[/template]

[comment]
	ValueSpecifications
[/comment]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(InstanceValue)) post(trim())]
[let anInstanceValue : InstanceValue = anElement.oclAsType(InstanceValue)]
[anInstanceValue.generateValueSpecificationInitialization()/]
[if (not (anInstanceValue.instance.oclIsUndefined()))]
[anInstanceValue.getFullNameSanitized()/].setInstance([anInstanceValue.instance.getFullNameSanitized()/]);
[/if]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LiteralBoolean)) post(trim())]
[let aLiteralBoolean : LiteralBoolean = anElement.oclAsType(LiteralBoolean)]
[aLiteralBoolean.generateValueSpecificationInitialization()/]
[aLiteralBoolean.getFullNameSanitized()/].setValue([aLiteralBoolean.value.toString()/]);
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LiteralInteger)) post(trim())]
[let aLiteralInteger : LiteralInteger = anElement.oclAsType(LiteralInteger)]
[aLiteralInteger.generateValueSpecificationInitialization()/]
[aLiteralInteger.getFullNameSanitized()/].setValue([aLiteralInteger.value.toString()/]);
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LiteralNull)) post(trim())]
[let aLiteralNull : LiteralNull = anElement.oclAsType(LiteralNull)]
[aLiteralNull.generateValueSpecificationInitialization()/]
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LiteralReal)) post(trim())]
[let aLiteralReal : LiteralReal = anElement.oclAsType(LiteralReal)]
[aLiteralReal.generateValueSpecificationInitialization()/]
[aLiteralReal.getFullNameSanitized()/].setValue([aLiteralReal.value.toString()/]f);
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LiteralString)) post(trim())]
[let aLiteralString : LiteralString = anElement.oclAsType(LiteralString)]
[aLiteralString.generateValueSpecificationInitialization()/]
[aLiteralString.getFullNameSanitized()/].setValue("[aLiteralString.value/]");
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(LiteralUnlimitedNatural)) post(trim())]
[let aLiteralUnlimitedNatural : LiteralUnlimitedNatural = anElement.oclAsType(LiteralUnlimitedNatural)]
[aLiteralUnlimitedNatural.generateValueSpecificationInitialization()/]
[aLiteralUnlimitedNatural.getFullNameSanitized()/].setValue([aLiteralUnlimitedNatural.value.toString()/]);
[/let]
[/template]

[template private generateElementInitialization(anElement : Element) ? (anElement.oclIsKindOf(OpaqueExpression)) post(trim())]
[let anOpaqueExpression : OpaqueExpression = anElement.oclAsType(OpaqueExpression)]
[anOpaqueExpression.generateValueSpecificationInitialization()/]
[comment Property 'OpaqueExpression::language' /]
[for (language : String | anOpaqueExpression.language)]
[anOpaqueExpression.getFullNameSanitized()/].addLanguage("[language/]");
[/for]
[comment Property 'OpaqueExpression::body' /]
[for (_body : String | anOpaqueExpression._body)]
[anOpaqueExpression.getFullNameSanitized()/].addBody("[_body.substituteAll('"', '\\"').substituteAll('\r\n', ' ')/]");
[/for]
[comment Property 'OpaqueExpression::behavior'/]
[if (not (anOpaqueExpression.behavior.oclIsUndefined()))]
[anOpaqueExpression.getFullNameSanitized()/].setBehavior([anOpaqueExpression.behavior.getFullNameSanitized()/]);
[/if]
[/let]
[/template]


[comment Just for fall-through /]
[template private generateElementInitialization(anElement : Element) post(trim())]
// Initialization is currently unimplemented for metaclass [anElement.eClass().name/]
[/template]

[comment ************************************************************************************************************************* /]

[template private generateAcceptEventActionInitialization(anAcceptEventAction : AcceptEventAction) post(trim())]
[anAcceptEventAction.generateActionInitialization()/]
[comment Property 'AcceptEventAction::isUnmarshall' /]
[if (anAcceptEventAction.isUnmarshall)]
[anAcceptEventAction.getFullNameSanitized()/].setIsUnmarshall(true);
[/if]
[comment Property 'AcceptEventAction::result' /]
[for (anOutputPin : OutputPin | anAcceptEventAction.result)]
[anAcceptEventAction.getFullNameSanitized()/].addResult([anOutputPin.getFullNameSanitized()/]);
[/for]
[comment Property 'AcceptEventAction::trigger' /]
[for (aTrigger : Trigger | anAcceptEventAction.trigger)]
[anAcceptEventAction.getFullNameSanitized()/].addTrigger([aTrigger.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateActionInitialization(anAction : Action) post(trim())]
[anAction.generateExecutableNodeInitialization()/]
[comment Property 'Action::isLocallyReentrant' /]
	[if (anAction.isLocallyReentrant)]
[anAction.getFullNameSanitized()/].setLocallyReentrant(true);
	[/if]
[/template]

[template private generateActivityNodeInitialization(anActivityNode : ActivityNode) post(trim())]
[anActivityNode.generateNamedElementInitialization()/]
[anActivityNode.generateRedefinableElementInitialization()/]
[/template]

[template private generateBehaviorInitialization(aBehavior : Behavior) post(trim())]
[aBehavior.generateClassifierInitialization()/]
[aBehavior.generateBehavioredClassifierInitialization()/]
[comment Property 'Behavior::isActive' /]
	[if (aBehavior.isActive)]
[aBehavior.getFullNameSanitized()/].setIsActive(true);
	[/if]
[comment Property 'Behavior::ownedOperation' /]
[for (anOperation : Operation | aBehavior.ownedOperation)]
[aBehavior.getFullNameSanitized()/].addOwnedOperation([anOperation.getFullNameSanitized()/]);
[/for]
[comment Property 'Behavior::ownedReception' /]
[for (aReception : Reception | aBehavior.ownedReception)]
[aBehavior.getFullNameSanitized()/].addOwnedReception([aReception.getFullNameSanitized()/]);
[/for]
[comment Property 'Behavior::isReentrant' /]
	[if (not (aBehavior.isReentrant))]
[aBehavior.getFullNameSanitized()/].isReentrant = false;
	[/if]
[comment Property 'Behavior::ownedParameter' /]
	[for (aParameter : Parameter | aBehavior.ownedParameter)]
[aBehavior.getFullNameSanitized()/].addOwnedParameter([aParameter.getFullNameSanitized()/]);
	[/for]
[/template]

[template private generateBehavioralFeatureInitialization(aBehavioralFeature : BehavioralFeature) post(trim())]
[aBehavioralFeature.generateFeatureInitialization()/]
[comment Property 'BehavioralFeature::isAbstract' /]
	[if (aBehavioralFeature.isAbstract)]
[aBehavioralFeature.getFullNameSanitized()/].setIsAbstract(true);
	[/if]
[comment Property 'BehavioralFeature::ownedParameter' /]
	[for (aParameter : Parameter | aBehavioralFeature.ownedParameter)]
[aBehavioralFeature.getFullNameSanitized()/].addOwnedParameter([aParameter.getFullNameSanitized()/]);
	[/for]
[comment Property 'BehavioralFeature::method' /]
	[for (aBehavior : Behavior | aBehavioralFeature.method)]
[aBehavioralFeature.getFullNameSanitized()/].addMethod([generateElementReference(aBehavior, aBehavioralFeature)/]);
	[/for]
[comment Property 'BehavioralFeature::raisedException' /]
	[for (aType : Type | aBehavioralFeature.raisedException)]
[aBehavioralFeature.getFullNameSanitized()/].addRaisedException([generateElementReference(aType, aBehavioralFeature)/]);
	[/for]
[/template]

[template private generateBehavioredClassifierInitialization(aBehavioredClassifier : BehavioredClassifier) post(trim())]
[comment Property 'BehavioredClassifier::classifierBehavior' /]
	[if (not (aBehavioredClassifier.classifierBehavior.oclIsUndefined()))]
[aBehavioredClassifier.getFullNameSanitized()/].setClassifierBehavior([generateElementReference(aBehavioredClassifier.classifierBehavior, aBehavioredClassifier)/]);
	[/if]
[comment Property 'BehavioredClassifier::ownedBehavior' /]
	[for (aBehavior : Behavior | aBehavioredClassifier.ownedBehavior)]
[aBehavioredClassifier.getFullNameSanitized()/].addOwnedBehavior([aBehavior.getFullNameSanitized()/]);
	[/for]
[comment Property 'BehavioredClassifier::interfaceRealization' /]
	[for (anInterfaceRealization : InterfaceRealization | aBehavioredClassifier.interfaceRealization)]
[aBehavioredClassifier.getFullNameSanitized()/].addInterfaceRealization([anInterfaceRealization.getFullNameSanitized()/]);
	[/for]
[/template]

[template private generateCallActionInitialization(aCallAction : CallAction) post(trim())]
[aCallAction.generateInvocationActionInitialization()/]
[comment Property 'CallAction::isSynchronous' /]
[if (not (aCallAction.isSynchronous))]
[aCallAction.getFullNameSanitized()/].isSynchronous = false;
[/if]
[comment Property 'CallAction::result' /]
[for (anOutputPin : OutputPin | aCallAction.result)]
[aCallAction.getFullNameSanitized()/].addResult([anOutputPin.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateClassifierInitialization(aClassifier : Classifier) post(trim())]
[aClassifier.generateNamedElementInitialization()/]
[aClassifier.generateRedefinableElementInitialization()/]
[comment Property 'Classifier::isAbstract' /]
	[if (aClassifier.isAbstract)]
[aClassifier.getFullNameSanitized()/].setIsAbstract(true);
	[/if]
[comment Property 'Classifier::isFinalSpecialization' /]
	[if (aClassifier.isFinalSpecialization)]
[aClassifier.getFullNameSanitized()/].setIsFinalSpecialization(true);
	[/if]
[comment Property 'Classifier::generalization' /]
[for (aGeneralization : Generalization | aClassifier.generalization->sortedBy(general.name))]
[aClassifier.getFullNameSanitized()/].addGeneralization([aGeneralization.getFullNameSanitized()/]);
[/for]
[comment Property 'Classifier::attribute' /]
[for (aProperty : Property | aClassifier.attribute)]
[aClassifier.getFullNameSanitized()/].addOwnedAttribute([aProperty.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateDataTypeInitialization(aDataType : DataType)]
[aDataType.generateClassifierInitialization()/]
[comment Property 'DataType::ownedOperation' /]
[for (anOperation : Operation | aDataType.ownedOperation)]
[aDataType.getFullNameSanitized()/].addOwnedOperation([aDataType.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateDependencyInitialization(aDependency : Dependency)]
[aDependency.generateNamedElementInitialization()/]
[comment Property 'Dependency::client' /]
[for (aNamedElement : NamedElement | aDependency.client)]
[aDependency.getFullNameSanitized()/].addClient([aNamedElement.getFullNameSanitized()/]);
[/for]
[comment Property 'Dependency::suplier' /]
[for (aNamedElement : NamedElement | aDependency.supplier)]
[aDependency.getFullNameSanitized()/].addSupplier([aNamedElement.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateEventInitialization(anEvent : Event) post(trim())]
[anEvent.generateNamedElementInitialization()/]
[/template]

[template private generateExecutableNodeInitialization(anExecutableNode : ExecutableNode) post(trim())]
[anExecutableNode.generateActivityNodeInitialization()/]
[comment Property 'ExecutableNode::handler' /]
[for (anExceptionHandler : ExceptionHandler | anExecutableNode.handler)]
[anExecutableNode.getFullNameSanitized()/].addExceptionHandler([anExceptionHandler.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateFeatureInitialization(aFeature : Feature) post(trim())]
[aFeature.generateNamedElementInitialization()/]
[aFeature.generateRedefinableElementInitialization()/]
[comment Property 'Feature::isStatic' /]
	[if (aFeature.isStatic)]
[aFeature.getFullNameSanitized()/].isStatic = true;
	[/if]
[/template]

[template private generateInvocationActionInitialization(anInvocationAction : InvocationAction)]
[anInvocationAction.generateActionInitialization()/]
[comment Property 'anInvocationAction::onPort'/]
[if (not anInvocationAction.onPort.oclIsUndefined())]
[anInvocationAction.getFullNameSanitized()/].setOnPort([anInvocationAction.onPort.getFullNameSanitized()/]);
[/if]
[/template]

[template private generateLinkActionInitialization(aLinkAction : LinkAction) post(trim())]
[aLinkAction.generateActionInitialization()/]
[comment Property 'LinkAction::endData' /]
[for (aLinkEndData : LinkEndData | aLinkAction.endData)]
[aLinkAction.getFullNameSanitized()/].addEndData([aLinkEndData.getFullNameSanitized()/]);
[/for]
[comment Property 'LinkAction::inputValue' /]
[for (anInputPin : InputPin | aLinkAction.inputValue)]
[aLinkAction.getFullNameSanitized()/].addInputValue([anInputPin.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateLinkEndDataInitialization(aLinkEndData : LinkEndData) post(trim())]
[comment Property 'LinkEndData::value' /]
[if (not (aLinkEndData.value.oclIsUndefined()))]
[aLinkEndData.getFullNameSanitized()/].setValue([aLinkEndData.value.getFullNameSanitized()/]);
[/if]
[comment Property 'LinkEndData::end' /]
[if (not (aLinkEndData.end.oclIsUndefined()))]
[aLinkEndData.getFullNameSanitized()/].setEnd([aLinkEndData.end.getFullNameSanitized()/]);
[/if]
[/template]

[template private generateMultiplicityElementInitialization(aMultiplicityElement : MultiplicityElement) post(trim())]
[comment Property 'MultiplicityElement::isOrdered' /]
	[if (aMultiplicityElement.isOrdered)]
[aMultiplicityElement.getFullNameSanitized()/].setIsOrdered(true);
	[/if]
[comment Property 'MultiplicityElement::isUnique' /]
	[if (not (aMultiplicityElement.isUnique))]
[aMultiplicityElement.getFullNameSanitized()/].setIsUnique(false);
	[/if]
[comment Property 'MultiplicityElement::upper' /]
	[if (aMultiplicityElement.upper <> 1)]
[aMultiplicityElement.getFullNameSanitized()/].setUpper([aMultiplicityElement.upper/]);
	[/if]
[comment Property 'MultiplicityElement::lower' /]
	[if (aMultiplicityElement.lower <> 1)]
[aMultiplicityElement.getFullNameSanitized()/].setLower([aMultiplicityElement.lower/]);
	[/if]
[/template]

[template private generateNamedElementInitialization(aNamedElement : NamedElement) post(trim())]
[comment Property 'NamedElement::name' /]
[aNamedElement.getFullNameSanitized()/].setName("[if(aNamedElement.oclIsKindOf(Operation))][aNamedElement.getRealName()/][else][aNamedElement.getName()/][/if]");
[aNamedElement.getFullNameSanitized()/].setVisibility(VisibilityKind.[aNamedElement.visibility/]_);
[/template]

[template private generateRedefinableElementInitialization(aRedefinableElement : RedefinableElement) post(trim())]
[comment Property 'RedefinableElement::isLeaf' /]
[if (aRedefinableElement.isLeaf)][aRedefinableElement.getFullNameSanitized()/].setIsLeaf(true);[/if]
[/template]

[template private generateSlotInitialization(aSlot : Slot) post(trim())]
[comment Property 'Slot::definingFeature' /]
	[if (not (aSlot.definingFeature.oclIsUndefined()))]
[aSlot.getFullNameSanitized()/].setDefiningFeature([generateElementReference(aSlot.definingFeature, aSlot)/]);
	[/if]
[comment Property 'Slot::value' /]
[for (aValueSpecification : ValueSpecification | aSlot.value)]
[aSlot.getFullNameSanitized()/].addValue([aValueSpecification.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateStructuralFeatureActionInitialization(aStructuralFeatureAction : StructuralFeatureAction) post(trim())]
[aStructuralFeatureAction.generateActionInitialization()/]
[comment Property 'StructuralFeatureAction::structuralFeature' /]
	[if (not (aStructuralFeatureAction.structuralFeature.oclIsUndefined()))]
[aStructuralFeatureAction.getFullNameSanitized()/].setStructuralFeature([generateElementReference(aStructuralFeatureAction.structuralFeature, aStructuralFeatureAction)/]);
	[/if]
[comment Property 'StructuralFeatureAction::object' /]
	[if (not (aStructuralFeatureAction.object.oclIsUndefined()))]
[aStructuralFeatureAction.getFullNameSanitized()/].setObject([aStructuralFeatureAction.object.getFullNameSanitized()/]);
	[/if]
[/template]

[template private generateStructuralFeatureInitialization(aStructuralFeature : StructuralFeature) post(trim())]
[aStructuralFeature.generateFeatureInitialization()/]
[aStructuralFeature.generateMultiplicityElementInitialization()/]
[aStructuralFeature.generateTypedElementInitialization()/]
[/template]

[template private generateStructuredActivityNodeInitialization(aStructuredActivityNode : StructuredActivityNode) post(trim())]
[aStructuredActivityNode.generateActionInitialization()/]
[comment Property 'StructuredActivityNode::node' /]
[for (anActivityNode : ActivityNode | aStructuredActivityNode.node)]
[aStructuredActivityNode.getFullNameSanitized()/].addNode([anActivityNode.getFullNameSanitized()/]);
[/for]
[comment Property 'StructuredActivityNode::edge' /]
[for (anActivityEdge : ActivityEdge | aStructuredActivityNode.edge)]
[aStructuredActivityNode.getFullNameSanitized()/].addEdge([anActivityEdge.getFullNameSanitized()/]);
[/for]
[comment Property 'StructuredActivityNode::structuredNodeInput' /]
[for (anInputPin : InputPin | aStructuredActivityNode.structuredNodeInput)]
[aStructuredActivityNode.getFullNameSanitized()/].addStructuredNodeInput([anInputPin.getFullNameSanitized()/]);
[/for]
[comment Property 'StructuredActivityNode::structuredNodeOutput' /]
[for (anOutputPin : OutputPin | aStructuredActivityNode.structuredNodeOutput)]
[aStructuredActivityNode.getFullNameSanitized()/].addStructuredNodeInput([anOutputPin.getFullNameSanitized()/]);
[/for]
[/template]

[template private generateStructuredClassifierInitialization(aStructuredClassifier : StructuredClassifier) post(trim())]
[comment Property 'StructuredClassifier::ownedConnector' /]
	[for (aConnector : Connector | aStructuredClassifier.ownedConnector)]
[aStructuredClassifier.getFullNameSanitized()/].addOwnedConnector([aConnector.getFullNameSanitized()/]);
	[/for]
[/template]

[template private generateTypedElementInitialization(aTypedElement : TypedElement) post(trim())]
[comment Property 'TypedElement::type' /]
	[if (not (aTypedElement.type.oclIsUndefined()))]
[aTypedElement.getFullNameSanitized()/].setType([generateElementReference(aTypedElement.type, aTypedElement)/]);
	[/if]
[/template]

[template private generateWriteStructuralFeatureActionInitialization(aWriteStructuralFeatureAction : WriteStructuralFeatureAction) post(trim())]
[aWriteStructuralFeatureAction.generateStructuralFeatureActionInitialization()/]
[comment Property 'WriteStructuralFeatureAction::value' /]
	[if (not (aWriteStructuralFeatureAction.value.oclIsUndefined()))]
[aWriteStructuralFeatureAction.getFullNameSanitized()/].setValue([aWriteStructuralFeatureAction.value.getFullNameSanitized()/]);
	[/if]
[comment Property 'WriteStructuralFeatureAction::result' /]
	[if (not (aWriteStructuralFeatureAction.result.oclIsUndefined()))]
[aWriteStructuralFeatureAction.getFullNameSanitized()/].setResult([aWriteStructuralFeatureAction.result.getFullNameSanitized()/]);
	[/if]
[/template]

[template private generateValueSpecificationInitialization(aValueSpecification : ValueSpecification) post(trim())]
[aValueSpecification.generateNamedElementInitialization()/]
[aValueSpecification.generateTypedElementInitialization()/]
[/template]

[template private generateElementReference(refferedElement : Element, referringElement : Element) post(trim())]
[if (refferedElement.getRootPackage() <> referringElement.getRootPackage())][refferedElement.getRootPackage().getNameSanitized() + 'Model.instance().'/][/if][refferedElement.getFullNameSanitized()/]
[/template]

[query private getRootPackage(anElement : Element) : Package = 
	if(anElement.getNearestPackage().isRootPackage())
		then anElement.getNearestPackage()
	else anElement.getNearestPackage().getRootPackage()
	endif /]
[query private getRootPackage(aPackage : Package) : Package = 
	if(aPackage.nestingPackage.isRootPackage())
		then aPackage.nestingPackage
	else aPackage.nestingPackage.getRootPackage()
	endif /]
[query private isRootPackage(aPackage : Package) : Boolean = aPackage.nestingPackage = null /]